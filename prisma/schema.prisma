generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid()) @db.UniqueIdentifier
  email            String?   @unique
  password         String?
  isEmailVerified  Boolean?   @default(false)
  companyLicenseNo String?
  companyNameEn    String?
  companyNameAr    String?
  landline         String?
  mobile           String?
  country          String?
  region           String?
  city             String?
  zipCode          String?
  streetAddress    String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  cart             Cart?
  orders           Order[]
  invoices         Invoice[]
}

model License {
  id        String    @id @default(uuid()) @db.UniqueIdentifier
  license   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model OTP {
  id        String   @id @default(uuid()) @db.UniqueIdentifier
  email     String
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String    @id @default(uuid()) @db.UniqueIdentifier
  image       String?
  title       String?
  description String?
  price       Float?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model Cart {
  id        String     @id @default(uuid()) @db.UniqueIdentifier
  userId    String     @unique @db.UniqueIdentifier
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(uuid()) @db.UniqueIdentifier
  cartId    String   @db.UniqueIdentifier
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String   @db.UniqueIdentifier
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

model Order {
  id            String      @id @default(uuid()) @db.UniqueIdentifier
  userId        String      @db.UniqueIdentifier
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems    OrderItem[]
  invoice       Invoice?
  paymentType   String
  totalAmount   Float
  vat           Float       @default(0)
  overallAmount Float
  status        OrderStatus @default(PENDING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid()) @db.UniqueIdentifier
  orderId   String   @db.UniqueIdentifier
  order     Order    @relation(fields: [orderId], references: [id])
  productId String   @db.UniqueIdentifier
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  id            String   @id @default(uuid()) @db.UniqueIdentifier
  orderId       String   @unique @db.UniqueIdentifier
  order         Order    @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  invoiceNumber String   @unique
  userId        String   @db.UniqueIdentifier
  user          User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  totalAmount   Float
  vat           Float    @default(0)
  overallAmount Float
  paymentType   String
  status        String   @default("pending")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

